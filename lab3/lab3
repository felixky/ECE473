%!PS-Adobe-3.0
%%Title: interrupts_SPI.c
%%For: Kyle Felix
%%Creator: a2ps version 4.14
%%CreationDate: Wed Oct 30 00:27:52 2019
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/**********************************************************************) c n
(Author: Kyle Felix) N
(Date: October 30th, 2019) N
(Class: ECE 473 Microcontrollers) N
(Descriptiion: In Lab 3, I will be implementing an LED display and a ) N
() S 8 T (pushbutton board on the ATmega128 using interrupts and SPI.) N
(**********************************************************************/) N
() p n
(/*) c 8 T () S 16 T () S 24 T (  HARDWARE SETUP:) N
(-  PORTA is connected to the segments of the LED display. and to the pushbuttons) N
(.) N
(-  PORTA.0 corresponds to segment a, PORTA.1 corresponds to segement b, etc.) N
(-  PORTB bits 4-6 go to a,b,c inputs of the 74HC138.) N
(-  PORTB bit 7 goes to the PWM transistor base.) N
(-  PORTB bit 3 goes to SOUT on the encoder) N
(-  PORTB bit 2 goes to SDIN for the Bargraph) N
(-  PORTB but 1 goes to both SRCLK\(Bargraph\) and SCK\(Encoder\)) N
(-  PORTB bit 0 goes to RegCLK on the Bargraph) N
(-  PORTE bit 6 goes to SHIFT_LD_N on the encoder) N
(-  PORTD bit 1 goes to CLK_INH on the encoder) N
(-  PORTD bit 0 goes to S_IN on te encoder) N
(-  PORTC bit 6 goes to OE_N on the bargraph  ) N
(**********************************************************************/) N
(//#define F_CPU 16000000 // cpu speed in hertz ) N
(#define) K
( TRUE 1) p n
(#define) K
( FALSE 0) p n
(#include) K
( <avr/io.h>) p n
(#include) K
( <avr/interrupt.h>) p n
(#include) K
( <util/delay.h>) p n
() N
(volatile) K
( uint8_t hex = 0;) p n
(volatile) K
( uint16_t mult = 0;) p n
(volatile) K
( ) p
(int) k
(16_t sum = 0;) p n
(volatile) K
( ) p
(int) k
(16_t mode_sel = 1;) p n
(volatile) K
( ) p
(int) k
(16_t prev_mode = 5;) p n
(volatile) K
( ) p
(int) k
(8_t EC_a_prev;) p n
(volatile) K
( ) p
(int) k
(8_t EC_b_prev;) p n
() N
(/**********************************************************************) c n
(Function: spi_init\(\) ) N
(Description: Initialization of the serial port interface. More specifics) N
() S 8 T (in the function below. ) N
(Parameters: NA) N
(**********************************************************************/) N
(void) k
( spi_init\(\){) p n
(   DDRB |= \(1<<DDB0\) | \(1<<DDB1\) | \(1<<DDB2\);) S 48 T () S
(//output mode for SS, MOSI, SCLK) c n
( ) N
(   SPCR |= \(1<<MSTR\) | \(1<<CPOL\) | \(1<<CPHA\) | \(1<<SPE\);) p
(//master mode, clk low o) c n
(n idle,) N
(// leading edge smaple , and spi enable ) N
(   SPSR |= \(1<<SPI2X\);) p 24 T () S 32 T () S 40 T () S
(//double speed operation  ) c n
(}) p n
() N
(/**********************************************************************) c n
(Function: spi_read\(\)) N
(Description: This function reads data from the SPI serially and returns ) N
() S 8 T (the 8 bit value that it read.) N
(Parameters: NA) N
(**********************************************************************/) N
(uint8_t spi_read\(\) {) p n
(   SPDR = 0x00;) S 16 T () S 24 T () S 32 T () S 40 T () S
(//'Dummy' write to SPI) c n
(   ) p
(while) K
(\(bit_is_clear\(SPSR, SPIF\)\){}) p 40 T () S
(//Reads the 8 bits serially) c n
(   ) p
(return) K
( SPDR;) p n
(}) N
() N
(/**********************************************************************) c n
(Function: segment_data[]) N
(Description: This is an array that will hold the data that will be ) N
() S 8 T (displayed.) N
(interrupts_SPI.c) (Page 1/6) (Oct 30, 19 0:25) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(Parameters: NA) c n
(**********************************************************************/) N
(//holds data to be sent to the segments. logic zero turns segment on) N
(uint8_t segment_data[5] = {) p n
(}; ) N
() N
(/**********************************************************************) c n
(Function: dec_to_7seg[]) N
(Description:decimal to 7-segment LED display encodings, logic "0" turns) N
() S 8 T (on segment) N
(Parameters: NA) N
(**********************************************************************/) N
(// 0x\(DP\)\(G\)\(F\)\(E\)\(D\)\(C\)\(B\)\(A\), active low) N
(uint8_t dec_to_7seg[18] = {) p n
(  0b11000000, ) S 16 T () S
(//0) c n
(  0b11111001,) p 16 T () S
(//1) c 24 T () N
(  0b10100100,) p 16 T () S
(//2) c n
(  0b10110000,) p 16 T () S
(//3) c n
(  0b10011001,) p 16 T () S
(//4) c n
(  0b10010010,) p 16 T () S
(//5) c n
(  0b10000010,) p 16 T () S
(//6) c n
(  0b11111000,) p 16 T () S
(//7) c n
(  0b10000000,) p 16 T () S
(//8) c n
(  0b10010000,) p 16 T () S
(//9) c n
(  0b10001000,   ) p
(//A) c n
(  0b10000011,   ) p
(//b) c n
(  0b11000110,) p 16 T () S
(//C) c n
(  0b10100001,) p 16 T () S
(//d) c n
(  0b10000110,) p 16 T () S
(//E) c n
(  0b10001110,   ) p
(//F) c n
(  0b11111111,) p 16 T () S
(//All segments off) c n
(  0b00000000,) p 16 T () S
(//All segments are on) c n
( ) p n
(};) N
(/**********************************************************************) c n
(Function: chk_buttons                                      ) N
(Description: Checks the state of the button number passed to it. It ) N
() S 8 T (shifts in ones till the button is pushed. Function returns a 1 only ) N
() S 8 T (once per debounced button push so a debounce and toggle function can ) N
() S 8 T (be implemented at the same time. Adapted to check all buttons from ) N
() S 8 T (Ganssel's "Guide to Debouncing" Expects active low pushbuttons on PINA ) N
() S 8 T (port.  Debounce time is determined by external loop delay times 12. ) N
(Parameters: A specific button number\(0-7\) to check if it is pressed) N
(**********************************************************************/) N
(uint8_t chk_buttons\(uint8_t button\) {) p n
(  ) S
(static) K
( uint16_t state[8] = {0, 0, 0, 0, 0, 0, 0, 0};) p n
(  state[button] = \(state[button] << 1\) | \(! bit_is_clear\(PINA,button\)\)| 0xE000;) N
(  ) S
(if) K
( \(state[button] == 0xF000\)) p n
(    ) S
(return) K
( 1;) p n
(return) K
( 0;) p n
(}) N
() N
(/*******************************************************************************) c n
(****) N
(Function:segment_sum                                    ) N
(Description: takes a 16-bit binary input value and places the appropriate equiva) N
(lent ) N
() S 8 T (4 digit BCD segment code in the array segment_data for display. array is) N
( ) N
() S 8 T (loaded at exit as:  |digit3|digit2|colon|digit1|digit0|) N
(Parameters: A sum that willl be decoded) N
(********************************************************************************) N
(****/) N
(void) k
( segsum\(uint16_t sum\) {) p n
(  ) S
(int) k
( d0,d1,d2,d3; ) p
(//,colon, digits;) c n
(  ) p
(//determine how many digits there are ) c n
(  ) p
(//break up decimal sum into 4 digit-segments) c n
(  ) p
(//This block of code takes in the sum and finds the 0-9 value for each of the ) c n
(four led digits  ) N
(interrupts_SPI.c) (Page 2/6) (Oct 30, 19 0:25) title
border
grestore
(Printed by Kyle Felix) rhead
(interrupts_SPI.c) (1/3) (Wednesday October 30, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  ) p
(if) K
(\(hex\) {) p n
(//Integer division and mod are used to convert decimal to hex) c n
(     d0 = \(\(sum%256\)%16\);) p
(//1s digit) c n
(     d1 = \(sum %256\)/16; ) p
(//10s digit) c n
(     d2 = sum/256;) p 24 T ( ) S
(//100s digit. Integer division) c n
(     d3 = 0;) p 16 T () S 24 T ( ) S
(//1000s digit. 1023 will never need this digit) c n
() p n
(     segment_data[0] = dec_to_7seg[d0]; ) N
(     segment_data[1] = dec_to_7seg[d1];) N
(     segment_data[2] = 0xFF;) N
(     segment_data[3] = dec_to_7seg[d2];) N
(     segment_data[4] = 0xFF;) N
(     ) N
(     ) S
(if) K
(\(sum < 0x100\)) p 24 T () S
(//Compares the sum to 255) c n
() p 8 T (segment_data[3] = 0xFF;) N
(     ) S
(if) K
(\(sum < 0x10\)) p 24 T () S
(//Compares the sum to 10) c n
() p 8 T (segment_data[1] = 0xFF;) N
(     ) N
(  }) N
(  ) S
(else) K
( {) p n
(     d0 = \(sum % 10\);) S 24 T () S 32 T () S
(//1's digit) c n
(     d1 = \(\(\(sum % 100\) / 10\) % 10\);) p 40 T () S
(//10's digit) c n
(     d2 = \(sum / 100\) % 10;) p 32 T () S 40 T () S
(//100's digit) c n
(     d3 = \(sum / 1000\) % 10;) p 32 T () S 40 T () S
(//1000's digit) c n
() p n
(  ) S
(//This block changes the decimal from just above into 8-bits that can be displ) c n
(ayed on the segments ) N
(     segment_data[0] = dec_to_7seg[d0]; ) p n
(     segment_data[1] = dec_to_7seg[d1];) N
(     segment_data[2] = 0xFF;) N
(     segment_data[3] = dec_to_7seg[d2];) N
(     segment_data[4] = dec_to_7seg[d3];) N
() N
(  ) S
(//blank out leading zero digits and determine number of digits) c n
(     ) p
(if) K
(\(sum < 0x3E8\)) p 24 T () S
(//Compares the sum to 1000) c n
() p 8 T (segment_data[4] = 0xFF;) N
(     ) S
(if) K
(\(sum < 0x64\)) p 24 T () S
(//Compares the sum to 100) c n
() p 8 T (segment_data[3] = 0xFF;) N
(     ) S
(if) K
(\(sum < 0xA\)) p 24 T () S
(//Compares the sum to 10) c n
() p 8 T (segment_data[1] = 0xFF;) N
(  }) N
(   ) S
(return) K
(;) p n
(}) S
(//segment_sum) c n
() p n
() N
(/**********************************************************************) c n
(Function: bar\(\)) N
(Description:This function reads in the button board and updates the ) N
() S 8 T (LEDs on the bargraph through the serial port.) N
(Parameters: NA) N
(**********************************************************************/) N
(void) k
( bars\(\) {) p n
(   DDRA = 0x00;) S 16 T () S 24 T () S 32 T () S 40 T () S
(//Set all as inputs) c n
(   PORTA = 0xFF;) p 24 T () S 32 T () S 40 T () S
(//Pull up resistors) c n
(   PORTB |= PINB | 0x70;) p 32 T () S 40 T () S
(//Enable tristate buffer) c n
() p n
(   ) S
(for) K
(\() p
(int) k
( i = 0; i < 8; i++\) {) p 32 T () S 40 T () S
(//Increment through all buttons) c n
(      ) p
(if) K
(\(chk_buttons\(i\) == 1\) {) p 32 T () S 40 T () S
(//Check if button is pressed) c n
(   ) p 8 T ( mult = \(1<<i\);) S 24 T () S 32 T () S 40 T () S
(//mult gets 2^i) c n
(      }) p n
(   }) N
(   ) S
(if) K
(\(mult == 128\){) p 24 T () S 32 T () S 40 T () S
(//Button 8 toggles base 10 and 16) c n
(      hex = !\(hex\);) p 24 T () S 32 T () S 40 T () S
(//on the LED display) c n
(   }) p n
(   ) S
(if) K
(\(mult > 4\) {) p 24 T () S 32 T () S 40 T () S
(//I only want values from the) c n
(      mult = 0;) p 16 T () S 24 T () S 32 T () S 40 T () S
(//first three buttons) c n
(   }) p n
(   ) S
(//This switch statement is used to enable a 'toggle' functionality) c n
(   ) p
(//so that modes can be selected an deselected) c n
(interrupts_SPI.c) (Page 3/6) (Oct 30, 19 0:25) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   ) p
(switch) K
(\(mult\) {) p n
(      ) S
(case) K
( 1:) p n
() S 8 T ( ) S
(if) K
(\(\(mode_sel ^ mult\) == 0\){) p 40 T () S
(//XOR to see if they are the same) c n
() p 8 T (    mode_sel = 0;) N
() S 8 T ( }) N
() S 8 T ( ) S
(else) K n
() p 8 T (    mode_sel = 1;) S 32 T () S 40 T () S
(//If not, then change mode) c n
(         ) p
(break) K
(;) p n
(      ) S
(case) K
( 2:) p n
() S 8 T ( ) S
(if) K
(\(\(mode_sel ^ mult\) && \(mode_sel != 1\)\){) p
(//if cur &prev are diff) c n
() p 8 T (    mode_sel = 0;) S
(//and prev isn't = 1 then two modes are selected) c n
() p 8 T ( }) N
() S 8 T ( ) S
(else) K n
() p 8 T (    mode_sel = 2;) S 32 T () S 40 T () S
(//If not, then change mode) c n
(         ) p
(break) K
(;) p n
(      ) S
(case) K
( 4:) p n
() S 8 T ( ) S
(if) K
(\(\(mode_sel ^ mult\) && \(mode_sel != 1\)\){) p
(//if cur &prev are diff) c n
() p 8 T (    mode_sel = 0;) S
(//and prev isn't = 1 then two modes are selected) c n
() p 8 T ( }) N
() S 8 T ( ) S
(else) K n
() p 8 T (    mode_sel = 4;) S 32 T () S 40 T () S
(//If not, then change mode) c n
(         ) p
(break) K
(;) p n
(      ) S
(default) K
(:) p n
() S 8 T ( mode_sel = mode_sel;) S 32 T () S 40 T () S
(//no/invalid button press) c n
(   }   ) p n
(   mult = 0;) S 16 T () S 24 T () S 32 T () S 40 T () S
(//clear mult for next pass) c n
() p n
(   DDRA = 0xFF;) S 16 T () S 24 T () S 32 T () S 40 T () S
(//Set A to alloutputs) c n
(   SPDR = mode_sel;) p 24 T () S 32 T () S 40 T () S
(//Write mode to the Bargraph) c n
(   ) p
(while) K
(\(bit_is_clear\(SPSR, SPIF\)\){}) p 40 T () N
(   PORTB |= \(1<<PB0\);) S 24 T () S 32 T () S 40 T () S
(//Rgclk high on bargraph) c n
(   PORTB &= 0xFE;) p 24 T () S 32 T () S 40 T () S
(//Rgclk low on bargraph) c n
(   ) p n
(return) K
( ;) p n
(}) N
() N
(/**********************************************************************) c n
(Function: read_encoder\(\)) N
(Description: THis function reads the SPI value of the encoders then uses) N
() S 8 T (a state machine to determine if the encoder is being turned cc) N
() S 8 T (or ccw. The value being return is + or - the mode_sel value.) N
(Parameters: NA) N
(**********************************************************************/) N
(int) k
(8_t read_encoder\(\) {) p n
(   uint8_t encoder_value;) N
(   ) S
(int) k
(8_t value = 0x00;) p n
(   uint8_t ec_a;) N
(   uint8_t ec_b;) N
() N
(   ) S
(//Shift_LD_N low) c n
(   PORTE &= 0x00;) p 24 T () S
(//Begining of SHIFT_LD_N pulse. It is low here) c n
(   _delay_us\(50\);) p n
(   PORTE |= 0xFF;) S 24 T () S
(//End of SHIFT_LD_N pulse. back to high) c n
(   PORTD &= 0x00;) p 24 T () S
(//CLK_INH low) c n
() p n
(   encoder_value = spi_read\(\);) N
(   PORTD |= 0x02;) S 24 T () S
(//CLK_INH high) c n
(   value = mode_sel;) p n
(   ec_a = encoder_value & 0x03;  ) S
(//Only grabs these bits 0000_0011) c n
(   ec_b = encoder_value & 0x0C;  ) p
(//Only grabs these bits 0000_1100 ) c n
(   ec_b = \(ec_b >> 2\);) p n
() N
(   ) S
(if) K
(\(ec_a != EC_a_prev\){ ) p
(//Compares curr encoder value to ast value ) c n
(      ) p
(if) K
(\(!\(EC_a_prev\) && \(ec_a == 0x01\)\){) p
(//Determines CW rotation) c n
(         value = value;) p n
(      }) N
(      ) S
(else) K
( ) p
(if) K
(\(!\(EC_a_prev\) && \(ec_a == 0x02\)\){) p
(//Determines CCW rotation) c n
() p 8 T ( value = -\(value\); ) N
(      }) N
(interrupts_SPI.c) (Page 4/6) (Oct 30, 19 0:25) title
border
grestore
(Printed by Kyle Felix) rhead
(interrupts_SPI.c) (2/3) (Wednesday October 30, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(else) K
() p 16 T () S
(//If not one of the state changes above, do nothing) c n
() p 8 T ( value = 0;) N
(   }) N
(   ) S
(else) K
( {) p 16 T () S
(//This is for encoder B) c n
(      ) p
(if) K
(\(!\(EC_b_prev\) && \(ec_b == 0x01\)\){) p
(//CW Rotation) c n
(         value = value; ) p n
(      }) N
(      ) S
(else) K
( ) p
(if) K
(\(!\(EC_b_prev\) && \(ec_b == 0x02\)\){) p
(//CCW Rotation) c n
() p 8 T ( value = -\(value\);) N
(      }) N
(      ) S
(else) K n
() p 8 T ( value = 0;) N
(   }) N
(//Saves previous values into volatile variables) c n
(EC_a_prev = ec_a;) p n
(EC_b_prev = ec_b;) N
() N
(return) K
( value;) p n
(}) N
() N
(/**********************************************************************) c n
(Function: ISR\(TIMER0_OVE_vect) N
(Description: Timer 0 overflow compare match interrupt. I call bars to ) N
() S 8 T (update the mode and bargraph. Then I change the sum based on) S 72 T () N
() S 8 T (the value returned from the encoder reading. Sum is then bounded) N
() S 8 T (from 0-1023. 1023+1=1 and 0-any number > 0 = 1023.) N
(Parameters: NA) N
(**********************************************************************/) N
(ISR\(TIMER0_OVF_vect\) {) p n
(      bars\(\);      ) N
(      sum = sum + read_encoder\(\);) N
(      ) S
(if) K
(\(sum>1023\)) p n
() S 8 T (sum = sum % 1023;) N
(      ) S
(if) K
(\(sum<0\)) p n
() S 8 T (sum = 1023; ) S
(//No overflow. If less than 0 always go to 1023.) c n
() p n
(}) N
() N
(/**********************************************************************) c n
(Function: main\(\)) N
(Description: Program interrupts are enabled, initial port declarations,) N
() S 8 T (and while loop are defined. The LED display is updated continuously ) N
() S 8 T (in the loop.) N
(Parameters: NA) N
(**********************************************************************/) N
(int) k
( main\(\) {) p n
(   TIMSK |= \(1<<TOIE0\);) S 24 T () S 32 T () S 40 T () S
(//enable interrupts) c n
(   TCCR0 |= \(1<<CS02\) | \(1<<CS00\);) p 40 T () S
(//normal mode, prescale by 128) c n
( ) p n
(   DDRC |= 0xFF; ) N
(   DDRB |= 0xF0;) S 24 T () S 32 T () S 40 T () S 48 T () S
(//PB4-6 is SEL0-2, PB7 is PWM) c n
(   DDRE |= 0x40;) p 24 T () S 32 T () S 40 T () S 48 T () S
(//PE6 is SHIFT_LD_N) c n
(   DDRD |= 0x0B;) p 24 T () S 32 T () S 40 T () S 48 T () S
(//PE1 is CLK_INH and PE2 is SRCL) c n
(K) N
(   PORTC |= 0x00;) p n
(   PORTD |= 0x02;) N
(   PORTE |= 0xFF;) N
() N
(   spi_init\(\);) S 16 T () S 24 T () S 32 T () S 40 T () S
(//Initalize SPI) c n
() p n
(   sei\(\);) S 16 T () S 24 T () S 32 T () S 40 T () S
(//Enable interrupts) c n
(   ) p n
(   ) S
(while) K
(\(1\){) p n
(      segsum\(sum\);) S 24 T () S 32 T () S 40 T () S
(//Send sum to be formatted for the 7 seg) c n
( display) N
() p n
(      ) S
(for) K
(\( ) p
(int) k
( j = 0; j < 5; j++\) {) p 40 T () S
(//cycles through each of the five digits) c n
(         ) p
(if) K
(\(j == 2 && hex\){) p n
() S 8 T (    PORTA = 0b00000011;) S 32 T () S 40 T () S
(//Turns on L3 on the LED display) c n
(interrupts_SPI.c) (Page 5/6) (Oct 30, 19 0:25) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T ( }) N
() S 8 T ( ) S
(else) K
( {) p n
(            ) S
(if) K
(\(hex\){) p n
() S 8 T (       PORTA = segment_data[j];) N
() S 8 T (    }) N
() S 8 T (    ) S
(else) K
( {) p n
(               PORTA = segment_data[j];) S 40 T () S
(//Writes the segment data to PORTA aka t) c n
(he segments) N
(            }) p n
(         }) N
(         PORTB = j << 4;) S 32 T () S 40 T () S
(//J is bound 0-4 and that value is shift) c n
(ed left 4 so that ) N
() p 8 T () S 16 T () S 24 T () S 32 T () S
(//the digit to be displayed is in pin 4, 5, and ) c n
(6 ) N
(         _delay_us\(300\);) p 32 T () S 40 T () S
(//delay so that the display does not fli) c n
(cker) N
(      }) p n
(//        PORTB = 0x00;) c n
(   }) p n
(return) K
( 0;) p n
(}) N
(interrupts_SPI.c) (Page 6/6) (Oct 30, 19 0:25) title
border
grestore
(Printed by Kyle Felix) rhead
(interrupts_SPI.c) (3/3) (Wednesday October 30, 2019) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
